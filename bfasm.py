#!/usr/bin/env python3

import sys
import subprocess

def run_cmd(*command):
    print(command)
    subprocess.run(command)

def compile_asm(input_path, output_name):
    obj_file = f'{output_name}.o'
    run_cmd('nasm', '-felf64', '-o', obj_file, input_path)
    run_cmd('ld', '-o', output_name, obj_file)

asm_write = """
    ; --- write (.) ---
    mov rax, SYS_WRITE
    mov rdi, FD_STDOUT    ; unsigned int fd
    mov rsi, rbx          ; const char *buf
    mov rdx, 1            ; size_t count
    syscall
"""

asm_read = """
    ; --- read (,) ---
    mov rax, SYS_READ
    mov rdi, FD_STDIN     ; unsigned int fd
    mov rsi, rbx          ; const char *buf
    mov rdx, 1            ; size_t count
    syscall
"""

asm_inc = """
    ; --- inc (+) ---
    inc byte [rbx]
"""

asm_dec = """
    ; --- dec (-) ---
    dec byte [rbx]
"""

asm_right = """
    ; --- right (>) ---
    inc rbx
"""

asm_left = """
    ; --- left (<) ---
    dec rbx
"""

asm_open = """
    ; --- open ([) ---
    cmp byte [rbx], 0
    jz after_%d
after_%d:
"""

asm_close = """
    ; --- close (]) ---
    cmp byte [rbx], 0
    jnz after_%d
after_%d:
"""

tok_asm_map = {
    '+': asm_inc,
    '-': asm_dec,
    '>': asm_right,
    '<': asm_left,
    ',': asm_read,
    '.': asm_write,
    '[': asm_open,
    ']': asm_close,
}

template = """;
; code generated by bfasm.py
;
bits 64

%%define SYS_READ  0
%%define SYS_WRITE 1
%%define SYS_EXIT  60
%%define FD_STDIN  0
%%define FD_STDOUT 1

segment .text

exit:
    mov rax, SYS_EXIT
    mov rdi, 0
    syscall
    ret


global _start
_start:
    ; initialize rbx as the pointer for the tape
    mov rbx, tape

    ; start of program

%s

    ; end of program
    call exit

segment .bss
tape: resb %d
"""

def parse(text):
    tokens = []
    for char in text:
        if char in '><+-.,[]':
            tokens.append((char,))

    brackets = []
    for i, tok in enumerate(tokens):
        if tok[0] == '[':
            brackets.append(i)
        elif tok[0] == ']':
            opening = brackets.pop()
            tokens[opening] = (tokens[opening][0], i)
            tokens[i] = (tokens[i][0], opening)

    return tokens

def generate(tokens, mem_size=65535):
    asm_body = []
    for i, tok in enumerate(tokens):
        tok_asm = tok_asm_map[tok[0]]
        if tok[0] in '><+-.,':
            asm_body.append(tok_asm)
        elif tok[0] in '[]':
            asm = tok_asm % (tok[1], i)
            asm_body.append(asm)
    return template % ("".join(asm_body), mem_size)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <input.bf> <output>")
        sys.exit(1)

    inp, outp = sys.argv[1:]

    with open(inp, 'r') as inf:
        parsed = parse(inf.read())

    generated = generate(parsed)
    out_asm = outp + '.asm'
    with open(out_asm, 'w') as asm:
        asm.write(generated)

    compile_asm(out_asm, outp)
